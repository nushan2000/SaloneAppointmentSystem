name: CI/CD Pipeline

on:
  push:
    branches: [ "develop1" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      REGISTRY: docker.io
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GKE_CLUSTER: salone-cluster
      GKE_ZONE: us-central1-a
      FRONTEND_IMAGE: nushan2000/frontend
      AUTH_IMAGE: nushan2000/auth-service
      APPOINTMENT_IMAGE: nushan2000/appointment-service
      NOTIFICATION_IMAGE: nushan2000/notification-service

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Build & Push each service
    - name: Log in to DockerHub
      run: echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

    - name: Build & Push Auth Service
      run: |
        docker build -t $AUTH_IMAGE:latest ./auth-service
        docker push $AUTH_IMAGE:latest

    - name: Build & Push Appointment Service
      run: |
        docker build -t $APPOINTMENT_IMAGE:latest ./appointment-service
        docker push $APPOINTMENT_IMAGE:latest

    - name: Build & Push Notification Service
      run: |
        docker build -t $NOTIFICATION_IMAGE:latest ./notification-service
        docker push $NOTIFICATION_IMAGE:latest

    - name: Build & Push Frontend
      run: |
        docker build -t $FRONTEND_IMAGE:latest ./frontend
        docker push $FRONTEND_IMAGE:latest

    # Deploy to GKE
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Get GKE credentials
      run: gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

    - name: Deploy to GKE
      run: |
        kubectl set image deployment/auth-service auth=$AUTH_IMAGE:latest
        kubectl set image deployment/appointment-service appointment=$APPOINTMENT_IMAGE:latest
        kubectl set image deployment/notification-service notification=$NOTIFICATION_IMAGE:latest
        kubectl set image deployment/frontend frontend=$FRONTEND_IMAGE:latest

